// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Computer.hdl
/**
 * The Hack computer, consisting of CPU, ROM and RAM.
 * When reset = 0, the program stored in the ROM executes.
 * When reset = 1, the program's execution restarts. 
 * Thus, to start running the currently loaded program,
 * set reset to 1, and then set it to 0. 
 * From this point onwards, the user is at the mercy of the software.
 * Depending on the program's code, and whether the code is correct,
 * the screen may show some output, the user may be expected to enter
 * some input using the keyboard, or the program may do some processing.
 */
CHIP Computer {

    IN reset;

    PARTS:
    ROM32K(address=pc,out=instruction);

    CPU(reset=reset,inM=inM,instruction=instruction,outM=outM,writeM=writeM,pc=pc,addressM[0..12]=addressM0to12,addressM[0..13]=addressM0to13,addressM[13]=addressM13,addressM[14]=addressM14);
    // The high number of addressM variables is a workaround for the following error:
    // "In HDL file ./nand2tetris/projects/5/Computer.hdl, Line nn, "
    // "addressM[0..12]: sub bus of an internal node may not be used: load Computer.hdl"

    // Memory-Mapped Peripheral Addressing:
    //              Address             Static Bits         Variable Bits
    // RAM16K       [0..16383]          ![14]               [0..13]
    // Screen       [16384..24575]      [14],![13]          [0..12]
    // Keyboard     [24576]             [13,14],![0..12]    NA

    // Select the memory mapped peripheral
    Not(in=addressM14,out=selectRam);
    Not(in=addressM13,out=not13);
    And(a=addressM14,b=not13,out=selectScreen);
    Nand(a=addressM13,b=addressM14,out=n13and14);
    Or16Way(in[0..12]=addressM0to12,in[13]=n13and14,in[14..15]=false,out=notSelectKeyboard);
    Not(in=notSelectKeyboard,out=selectKeyboard);
    And(a=selectRam,b=writeM,out=writeRam);

    // Peripheral chips
    RAM16K(in=outM,load=writeRam,address=addressM0to13,out=ramOut);
    Screen(in=outM,load=selectScreen,address=addressM0to12,out=screenOut);
    Keyboard(out=keyboardOut);

    // Select peripheral output
    Mux16(out=screenOrKeyboardOut,sel=addressM13,a=screenOut,b=keyboardOut);
    Mux16(out=inM,sel=addressM14,a=ramOut,b=screenOrKeyboardOut);
}
