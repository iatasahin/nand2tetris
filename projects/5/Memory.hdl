// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Memory-Mapped Peripheral Addressing:
    //              Address             Static Bits         Variable Bits
    // RAM16K       [0..16383]          ![14]               [0..13]
    // Screen       [16384..24575]      [14],![13]          [0..12]
    // Keyboard     [24576]             [13,14],![0..12]    NA

    // Select the memory mapped peripheral
    Not(in=address[14],out=selectRam);
    Not(in=address[13],out=not13);
    And(a=address[14],b=not13,out=selectScreen);
    Nand(a=address[13],b=address[14],out=n13and14);
    Or16Way(in[0..12]=address[0..12],in[13]=n13and14,in[14..15]=false,out=notSelectKeyboard);
    Not(in=notSelectKeyboard,out=selectKeyboard);
    And(a=selectRam,b=load,out=writeRam);

    // Peripheral chips
    RAM16K(in=in,load=writeRam,address=address[0..13],out=ramOut);
    Screen(in=in,load=selectScreen,address=address[0..12],out=screenOut);
    Keyboard(out=keyboardOut);

    // Select peripheral output
    Mux16(out=screenOrKeyboardOut,sel=address[13],a=screenOut,b=keyboardOut);
    Mux16(out=out,sel=address[14],a=ramOut,b=screenOrKeyboardOut);
}